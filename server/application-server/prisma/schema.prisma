generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int               @id @default(autoincrement())
  name            String
  email           String?           @unique
  password        String?
  address         String?
  createdAt       DateTime          @default(now())
  openId          String?           @unique
  unionId         String?           @unique
  avatarUrl       String?
  gender          Int?
  country         String?
  province        String?
  city            String?
  language        String?
  ref             String?           // 引荐码，用于记录用户是被谁引荐的
  appointments    Appointment[]
  cart            Cart?
  CoupunOrderUser CoupunOrderUser[]
  orders          Order[]
  referredUsers   UserReferral[]    @relation("ReferredUsers")
  referredBy      UserReferral?     @relation("ReferredBy")
  chatSessions    ChatSession[]
  chatMessages    ChatMessage[]
  userPreference  UserPreference?
  logAnalysisTasks LogAnalysisTask[]
  createdWhitelistRules IssueWhitelistRule[]
}

// 用户引荐关联记录表
model UserReferral {
  id                Int           @id @default(autoincrement())
  userId            Int           @unique // 被引荐的用户ID
  refCode           String        // 引荐码
  referrerOpenId    String?       // 引荐人的OpenID，设为可选
  createdAt         DateTime      @default(now())
  source            String?       // 引荐来源
  metadata          Json?         // 额外元数据
  user              User          @relation("ReferredBy", fields: [userId], references: [userId])
  referrer          User?         @relation("ReferredUsers", fields: [referrerOpenId], references: [openId])
  referralCodeId    Int?          // 关联的引荐码ID，可为空（兼容老数据）
  referralCode      ReferralCode? @relation(fields: [referralCodeId], references: [id])
}

model Order {
  orderId         Int               @id @default(autoincrement())
  total           Float
  status          Status            @default(PENDING)
  createdAt       DateTime          @default(now())
  userId          Int
  appointmentId   Int?
  appointmentInfo Json?
  paymentStatus   PaymentStatus     @default(UNPAID)
  CoupunOrderUser CoupunOrderUser[]
  appointment     Appointment?      @relation(fields: [appointmentId], references: [id])
  user            User              @relation(fields: [userId], references: [userId])
  items           OrderItem[]
}

model OrderItem {
  orderItemId Int      @id @default(autoincrement())
  quantity    Int
  createdAt   DateTime @default(now())
  orderId     Int
  productId   Int
  order       Order    @relation(fields: [orderId], references: [orderId])
  product     Product  @relation(fields: [productId], references: [productId])
}

model Product {
  productId   Int         @id @default(autoincrement())
  name        String
  price       Float
  description String
  stock       Int
  createdAt   DateTime    @default(now())
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  cartId    Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [userId])
  items     CartItem[]
}

model CartItem {
  cartItemId Int      @id @default(autoincrement())
  quantity   Int
  createdAt  DateTime @default(now())
  cartId     Int
  productId  Int
  cart       Cart     @relation(fields: [cartId], references: [cartId])
  product    Product  @relation(fields: [productId], references: [productId])
}

model Coupon {
  couponId        Int               @id @default(autoincrement())
  code            String            @unique
  discount        Decimal
  expireAt        DateTime
  createdAt       DateTime          @default(now())
  CoupunOrderUser CoupunOrderUser[]
}

model CoupunOrderUser {
  userId   Int
  orderId  Int
  couponId Int
  coupun   Coupon @relation(fields: [couponId], references: [couponId])
  order    Order  @relation(fields: [orderId], references: [orderId])
  user     User   @relation(fields: [userId], references: [userId])

  @@id([userId, orderId, couponId])
}

model BlacklistedToken {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  userId        Int
  blacklistedAt DateTime @default(now())
  expiresAt     DateTime
}

model Appointment {
  id             Int               @id @default(autoincrement())
  serviceType    String
  name           String
  phone          String
  region         String
  address        String?
  sceneType      String[]
  location       String
  createdAt      DateTime          @default(now())
  userId         Int
  cancelReason   String?
  cancelledAt    DateTime?
  cityCode       String?
  completedAt    DateTime?
  districtCode   String?
  followUpCount  Int               @default(0)
  lastFollowUpAt DateTime?
  latitude       Float?
  longitude      Float?
  description    String?           // 预约描述字段
  imageUrls      String[]          // 图片URL数组
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [userId])
  orders         Order[]
}

enum Status {
  PENDING    // 待接单
  ACCEPTED   // 已接单
  PROCESSING // 施工中
  COMPLETED  // 已完成
  CANCELLED  // 已取消
  DELIVERED  // 已交付 (保留原有状态)
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum AppointmentStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

// 引荐码表
model ReferralCode {
  id            Int             @id @default(autoincrement())
  code          String          @unique  // 引荐码，唯一
  description   String?         // 引荐码描述
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isActive      Boolean         @default(true) // 是否激活
  referrals     UserReferral[]  // 关联的引荐记录
}

// AI聊天会话表
model ChatSession {
  sessionId    String        @id
  userId       Int
  title        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  messageCount Int           @default(0)
  user         User          @relation(fields: [userId], references: [userId])
  messages     ChatMessage[]

  @@index([userId])
  @@index([updatedAt])
}

// AI聊天消息表
model ChatMessage {
  id          Int         @id @default(autoincrement())
  sessionId   String
  userId      Int
  userMessage String
  aiResponse  String
  createdAt   DateTime    @default(now())
  session     ChatSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [userId])

  @@index([sessionId])
  @@index([userId])
  @@index([createdAt])
}

// 用户偏好设置表
model UserPreference {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  preferences Json     // 存储用户偏好的JSON数据
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [userId])
}

// 日志分析相关模型
model LogAnalysisTask {
  id            String              @id @default(cuid())
  taskId        String              @unique
  userId        Int                 // 发起分析的开发人员ID
  userFeedback  String              // 用户反馈内容
  status        LogAnalysisStatus   @default(PENDING)
  priority      LogPriority         @default(MEDIUM)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  completedAt   DateTime?
  
  // 分析配置
  timeRange     Json                // 时间范围配置
  logSources    String[]            // 日志来源
  keywords      String[]            // 关键词
  
  // 分析结果
  summary       String?             // 分析摘要
  findings      Json?               // 详细发现
  recommendations Json?             // 建议
  
  user          User                @relation(fields: [userId], references: [userId])
  logEntries    LogEntry[]
  agentResults  AgentAnalysisResult[]
  userLogIssues UserLogIssue[]
  
  @@map("log_analysis_tasks")
}

model LogEntry {
  id            String              @id @default(cuid())
  taskId        String
  timestamp     DateTime
  level         LogLevel
  source        String              // 日志来源 (backend, frontend, mobile)
  service       String?             // 服务名称
  message       String
  stackTrace    String?
  userId        Int?                // 关联的用户ID
  sessionId     String?             // 会话ID
  requestId     String?             // 请求ID
  metadata      Json?               // 额外元数据
  
  // 归一化后的字段
  normalizedType    String?         // 归一化的错误类型
  severity         Int              @default(1) // 严重程度 1-5
  category         String?          // 错误分类
  
  task          LogAnalysisTask     @relation(fields: [taskId], references: [taskId])
  userLogIssues UserLogIssue[]
  
  @@index([taskId, timestamp])
  @@index([userId, timestamp])
  @@index([normalizedType])
  @@map("log_entries")
}

model AgentAnalysisResult {
  id            String              @id @default(cuid())
  taskId        String
  agentType     AgentType
  status        AgentStatus         @default(RUNNING)
  startedAt     DateTime            @default(now())
  completedAt   DateTime?
  
  // 分析结果
  findings      Json                // Agent的发现
  confidence    Float               @default(0.0) // 置信度 0-1
  recommendations Json?             // 建议
  
  task          LogAnalysisTask     @relation(fields: [taskId], references: [taskId])
  
  @@map("agent_analysis_results")
}

// 用户日志问题模型
model UserLogIssue {
  id              String              @id @default(cuid())
  taskId          String
  logEntryId      String?             // 关联的日志条目
  issueType       UserLogIssueType
  title           String              // 问题标题
  description     String              // 问题描述
  severity        IssueSeverity       @default(MEDIUM)
  status          IssueStatus         @default(DETECTED)
  
  // 问题特征数据
  apiEndpoint     String?             // 接口名
  inputParams     Json?               // 入参数据
  paramSource     String?             // 参数来源
  retCode         Int?                // 后端返回码
  errorMessage    String?             // 错误信息
  pageUrl         String?             // 页面URL
  isBlocking      Boolean             @default(false) // 是否阻塞流程
  affectsKeyFlow  Boolean             @default(false) // 是否影响关键流程
  
  // 业务相关
  vehicleModel    String?             // 车型
  specification   Json?               // 规格参数
  
  // 分析结果
  rootCause       String?             // 根因分析
  solution        String?             // 解决方案
  confidence      Float               @default(0.0) // 置信度
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  task            LogAnalysisTask     @relation(fields: [taskId], references: [taskId])
  logEntry        LogEntry?           @relation(fields: [logEntryId], references: [id])
  whitelistRules  IssueWhitelistRule[]
  
  @@index([taskId, issueType])
  @@index([apiEndpoint, retCode])
  @@map("user_log_issues")
}

// 问题白名单规则
model IssueWhitelistRule {
  id            String              @id @default(cuid())
  issueId       String?             // 关联的问题ID（可选）
  ruleType      WhitelistRuleType
  ruleName      String              // 规则名称
  description   String?             // 规则描述
  
  // 匹配条件
  conditions    Json                // 匹配条件JSON
  // 例如: {"retCode": 1001, "apiEndpoint": "/api/user/check", "reason": "用户手机号注销"}
  
  isActive      Boolean             @default(true)
  createdBy     Int                 // 创建人
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  creator       User                @relation(fields: [createdBy], references: [userId])
  issue         UserLogIssue?       @relation(fields: [issueId], references: [id])
  
  @@index([ruleType, isActive])
  @@map("issue_whitelist_rules")
}

// 业务参数特征模型
model BusinessParamFeature {
  id              String              @id @default(cuid())
  featureName     String              // 特征名称
  apiEndpoint     String              // 接口名
  paramPath       String              // 参数路径 (如: "vehicle.model")
  paramSource     String?             // 参数来源
  
  // 统计数据
  totalCount      Int                 @default(0)  // 总出现次数
  errorCount      Int                 @default(0)  // 错误次数
  uniqueValues    Json?               // 唯一值统计
  
  // 异常检测
  expectedValues  Json?               // 期望值范围
  isAnomalous     Boolean             @default(false)
  anomalyScore    Float?              // 异常分数
  
  lastUpdated     DateTime            @default(now())
  createdAt       DateTime            @default(now())
  
  @@unique([apiEndpoint, paramPath])
  @@index([apiEndpoint])
  @@index([isAnomalous])
  @@map("business_param_features")
}

enum LogAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum LogPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum AgentType {
  NORMALIZATION     // 日志归一化Agent
  ERROR_ANALYSIS    // 错误分析Agent
  FEATURE_EXTRACTION // 特征提取Agent
  ANOMALY_DETECTION  // 异常检测Agent
  BEHAVIOR_ANALYSIS  // 行为分析Agent
  REPORT_GENERATION  // 报告生成Agent
  USER_LOG_ISSUE     // 用户日志问题Agent
}

enum AgentStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum UserLogIssueType {
  BACKEND_RET_ERROR     // 后端返回码非0
  FRONTEND_JS_ERROR     // 前端JS错误
  BLOCKING_ERROR        // 阻塞性错误
  KEY_FLOW_ERROR        // 关键流程错误
  PAGE_UNLOAD_ERROR     // 页面卸载错误
  BUSINESS_PARAM_ERROR  // 业务参数异常
  VEHICLE_SPEC_ERROR    // 车型规格异常
}

enum IssueSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IssueStatus {
  DETECTED     // 已检测
  CONFIRMED    // 已确认
  IGNORED      // 已忽略
  RESOLVED     // 已解决
}

enum WhitelistRuleType {
  RET_CODE_IGNORE      // 返回码忽略
  JS_ERROR_IGNORE      // JS错误忽略
  PARAM_VALUE_IGNORE   // 参数值忽略
  API_ENDPOINT_IGNORE  // 接口忽略
}
