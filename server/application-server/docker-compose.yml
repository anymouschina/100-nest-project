version: '3.8'

services:
  # PostgreSQL数据库
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: oms-postgres
  #   environment:
  #     POSTGRES_DB: oms_db
  #     POSTGRES_USER: oms_user
  #     POSTGRES_PASSWORD: oms_password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - oms-network

  # # Redis缓存
  # redis:
  #   image: redis:7-alpine
  #   container_name: oms-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes
  #   networks:
  #     - oms-network

  # Qdrant向量数据库
  qdrant:
    image: docker-0.unsee.tech/qdrant/qdrant:v1.7.4
    container_name: oms-qdrant
    ports:
      - "6333:6333"  # REST API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      # 生产环境建议启用认证
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      # 可选：启用集群模式
      # QDRANT__CLUSTER__ENABLED: true
    networks:
      - oms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 可选：Qdrant Web UI (开发环境)
  qdrant-web-ui:
    image: docker-0.unsee.tech/qdrant/qdrant:v1.7.4
    container_name: oms-qdrant-ui
    ports:
      - "6333:6333"
    depends_on:
      - qdrant
    environment:
      QDRANT_HOST: qdrant
    networks:
      - oms-network
    profiles:
      - dev  # 只在开发环境启动

volumes:
  qdrant_data:
    driver: local

networks:
  oms-network:
    driver: bridge 